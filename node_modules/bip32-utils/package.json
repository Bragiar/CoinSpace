{
  "_args": [
    [
      {
        "raw": "bip32-utils@git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
        "scope": null,
        "escapedName": "bip32-utils",
        "name": "bip32-utils",
        "rawSpec": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
        "spec": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:CoinSpace/bip32-utils.git#v0.11.3",
          "sshUrl": "git+ssh://git@github.com/CoinSpace/bip32-utils.git#v0.11.3",
          "httpsUrl": "git+https://github.com/CoinSpace/bip32-utils.git#v0.11.3",
          "gitUrl": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
          "shortcut": "github:CoinSpace/bip32-utils#v0.11.3",
          "directUrl": "https://raw.githubusercontent.com/CoinSpace/bip32-utils/v0.11.3/package.json"
        }
      },
      "/Users/bragiarnarson/Documents/GitHub/CoinSpace/node_modules/cs-wallet"
    ]
  ],
  "_from": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
  "_id": "bip32-utils@0.11.3",
  "_inCache": true,
  "_location": "/bip32-utils",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bip32-utils@git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
    "scope": null,
    "escapedName": "bip32-utils",
    "name": "bip32-utils",
    "rawSpec": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
    "spec": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:CoinSpace/bip32-utils.git#v0.11.3",
      "sshUrl": "git+ssh://git@github.com/CoinSpace/bip32-utils.git#v0.11.3",
      "httpsUrl": "git+https://github.com/CoinSpace/bip32-utils.git#v0.11.3",
      "gitUrl": "git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
      "shortcut": "github:CoinSpace/bip32-utils#v0.11.3",
      "directUrl": "https://raw.githubusercontent.com/CoinSpace/bip32-utils/v0.11.3/package.json"
    }
  },
  "_requiredBy": [
    "/cs-wallet"
  ],
  "_resolved": "git://github.com/CoinSpace/bip32-utils.git#ad9af01c701f92cc0d606b4859359820513eb009",
  "_shasum": "99313ebd9087c9ad51d2107571cabbacc41336b0",
  "_shrinkwrap": null,
  "_spec": "bip32-utils@git://github.com/CoinSpace/bip32-utils.git#v0.11.3",
  "_where": "/Users/bragiarnarson/Documents/GitHub/CoinSpace/node_modules/cs-wallet",
  "author": {
    "name": "Daniel Cousens"
  },
  "bugs": {
    "url": "https://github.com/bitcoinjs/bip32-utils/issues"
  },
  "dependencies": {},
  "description": "A set of utilities for working with BIP32.",
  "devDependencies": {
    "bitcoinjs-lib": "^3.0.0",
    "hdkey": "^0.8.0",
    "keccak": "^1.3.0",
    "nyc": "*",
    "standard": "*",
    "tape": "*"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "ad9af01c701f92cc0d606b4859359820513eb009",
  "homepage": "https://github.com/bitcoinjs/bip32-utils",
  "keywords": [
    "bip32-utils",
    "bip32",
    "bip44",
    "account",
    "chain",
    "discovery",
    "gap",
    "bitcoinjs",
    "bitcoin"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "bip32-utils",
  "optionalDependencies": {},
  "peerDependencies": {
    "bitcoinjs-lib": "^3.0.0"
  },
  "readme": "# bip32-utils\n\n[![TRAVIS](https://secure.travis-ci.org/CoinSpace/bip32-utils.png)](http://travis-ci.org/CoinSpace/bip32-utils)\n[![js-standard-style](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\nA set of utilities for working with BIP32.\nCompatible with bitcoinjs-lib `^2.0.0` and `^3.0.0`.\n\n\n## Example\n\n#### BIP32 Account\n``` javascript\nvar bitcoin = require('bitcoinjs-lib')\nvar bip32utils = require('bip32-utils')\n\n// ...\n\nvar m = bitcoin.HDNode.fromSeedHex(seedHex)\nvar i = m.deriveHardened(0)\nvar external = i.derive(0)\nvar internal = i.derive(1)\nvar account = new bip32utils.Account([\n  new bip32utils.Chain(external.neutered()),\n  new bip32utils.Chain(internal.neutered())\n])\n\nconsole.log(account.getChainAddress(0))\n// => 1QEj2WQD9vxTzsGEvnmLpvzeLVrpzyKkGt\n\naccount.nextChainAddress(0)\n\nconsole.log(account.getChainAddress(1))\n// => 1DAi282VN7Ack9o5BqWYkiEsS8Vgx1rLn\n\nconsole.log(account.nextChainAddress(1))\n// => 1CXKM323V3kkrHmZQYPUTftGh9VrAWuAYX\n\nconsole.log(account.derive('1QEj2WQD9vxTzsGEvnmLpvzeLVrpzyKkGt'))\n// => xpub6A5Fz4JZg4kd8pLTTaMBKsvVgzRBrvai6ChoxWNTtYQ3UDVG1VyAWQqi6SNqkpsfsx9F8pRqwtKUbU4j4gqpuN2gpgQs4DiJxsJQvTjdzfA\n\n// NOTE: passing in the parent nodes allows for private key escalation (see xprv vs xpub)\n\nconsole.log(account.derive('1QEj2WQD9vxTzsGEvnmLpvzeLVrpzyKkGt', [external, internal]))\n// => xprv9vodQPEygdPGUWeKUVNd6M2N533PvEYP21tYxznauyhrYBBCmdKxRJzmnsTsSNqfTJPrDF98GbLCm6xRnjceZ238Qkf5GQGHk79CrFqtG4d\n```\n\n\n#### BIP32 Chains\n``` javascript\nvar bitcoin = require('bitcoinjs-lib')\nvar bip32utils = require('bip32-utils')\n\n// ...\n\nvar hdNode = bitcoin.HDNode.fromSeedHex(seedHex)\nvar chain = new bip32utils.Chain(hdNode)\n\nfor (var k = 0; k < 10; ++k) chain.next()\n\nvar address = chain.get()\n\nconsole.log(chain.find(address))\n// => 9\n\nconsole.log(chain.pop())\n// => address\n```\n\n\n#### BIP32 Discovery (manual)\n``` javascript\nvar bip32utils = require('bip32-utils')\nvar bitcoin = require('bitcoinjs-lib')\nvar Blockchain = require('cb-blockr')\n\n// ...\n\nvar blockchain = new Blockchain('testnet')\nvar hdNode = bitcoin.HDNode.fromSeedHex(seedHex)\nvar chain = bip32utils.Chain(hdNode)\nvar GAP_LIMIT = 20\n\nbip32utils.discovery(chain, GAP_LIMIT, function(addresses, callback) {\n  blockchain.addresses.summary(addresses, function(err, results) {\n    if (err) return callback(err)\n\n    var areUsed = results.reduce(function(obj, result) {\n      obj[result] = result.totalReceived > 0\n      return obj\n    }, {})\n\n    callback(undefined, areUsed)\n  })\n}, function(err, used, checked) {\n  if (err) throw err\n\n  console.log('Discovered at most ' + used + ' used addresses')\n  console.log('Checked ' + checked + ' addresses')\n  console.log('With at least ' + (checked - used) + ' unused addresses')\n\n  // throw away ALL unused addresses AFTER the last unused address\n  var unused = checked - used\n  for (var i = 1; i < unused; ++i) chain.pop()\n\n  // remember used !== total, chain may have started at a k-index > 0\n  console.log('Total number of addresses (after prune): ', chain.addresses.length)\n})\n```\n\n\n## LICENSE [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bitcoinjs/bip32-utils.git"
  },
  "scripts": {
    "coverage": "nyc --check-coverage --branches 90 --functions 90 npm run unit",
    "coverage-report": "nyc report --reporter=lcov",
    "standard": "standard",
    "test": "npm run standard && npm run coverage",
    "unit": "tape test/*.js"
  },
  "version": "0.11.3"
}
